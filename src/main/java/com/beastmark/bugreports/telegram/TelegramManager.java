package com.beastmark.bugreports.telegram;

import com.beastmark.bugreports.BugReports;
import com.beastmark.bugreports.model.Report;
import org.bukkit.Bukkit;
import org.bukkit.configuration.ConfigurationSection;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.*;
import java.util.logging.Level;

public class TelegramManager extends TelegramLongPollingBot {
    private final BugReports plugin;
    private final Map<String, UUID> verificationCodes = new HashMap<>();
    private final Map<Long, AdminSession> adminSessions = new HashMap<>();

    private static class AdminSession {
        UUID minecraftUUID;
        String currentAction;
        Integer selectedReportId;

        AdminSession(UUID minecraftUUID) {
            this.minecraftUUID = minecraftUUID;
        }
    }

    public TelegramManager(BugReports plugin) {
        super(plugin.getConfig().getString("telegram.bot-token", ""));
        this.plugin = plugin;
        
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(this);
            plugin.getLogger().info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
        } catch (TelegramApiException e) {
            plugin.getLogger().severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞: " + e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return plugin.getConfig().getString("telegram.bot-username", "BugReportsBot");
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                String message = update.getMessage().getText();
                long chatId = update.getMessage().getChatId();

                if (message.startsWith("/start")) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —á–∞—Ç
                    if (isAdminAuthorized(chatId)) {
                        String uuid = plugin.getConfig().getString("telegram.linked-accounts." + chatId);
                        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if (uuid != null) {
                            adminSessions.put(chatId, new AdminSession(UUID.fromString(uuid)));
                        }
                        sendMessage(chatId, "–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n" +
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n" +
                            "üìã /reports - –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤\n" +
                            "üìä /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
                            "‚ùì /help - –ü–æ–º–æ—â—å");
                    } else {
                        sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BugReports Bot!\n" +
                            "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link <–∫–æ–¥>\n" +
                            "–ö–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –∏–≥—Ä–µ, –Ω–∞–ø–∏—Å–∞–≤ /reportadmin telegram");
                    }
                    return;
                }

                if (message.startsWith("/link")) {
                    handleLinkCommand(chatId, message);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
                if (!isAdminAuthorized(chatId)) {
                    sendMessage(chatId, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link <–∫–æ–¥> –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.");
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if (!adminSessions.containsKey(chatId)) {
                    String uuid = plugin.getConfig().getString("telegram.linked-accounts." + chatId);
                    if (uuid != null) {
                        adminSessions.put(chatId, new AdminSession(UUID.fromString(uuid)));
                    }
                }

                handleAdminCommand(chatId, message);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
            if (update.hasCallbackQuery()) {
                handleCallbackQuery(update);
            }
        } catch (Exception e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram", e);
        }
    }

    private void handleLinkCommand(long chatId, String message) {
        String[] args = message.split(" ");
        if (args.length != 2) {
            sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /link <–∫–æ–¥>");
            return;
        }

        String code = args[1];
        UUID playerUUID = verificationCodes.get(code);
        if (playerUUID == null) {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫.");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        plugin.getConfig().set("telegram.linked-accounts." + chatId, playerUUID.toString());
        plugin.saveConfig();
        verificationCodes.remove(code);

        adminSessions.put(chatId, new AdminSession(playerUUID));
        sendMessage(chatId, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–ø–æ—Ä—Ç–∞—Ö.");
        sendMainMenu(chatId);
    }

    private void handleAdminCommand(long chatId, String message) {
        AdminSession session = adminSessions.get(chatId);
        if (session == null) {
            plugin.getLogger().warning("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chatId: " + chatId);
            return;
        }

        if (session.currentAction != null) {
            switch (session.currentAction) {
                case "WAITING_STATUS":
                    if (session.selectedReportId != null) {
                        updateReportStatus(chatId, session.selectedReportId, message);
                        session.currentAction = null;
                        session.selectedReportId = null;
                    }
                    break;
                case "WAITING_MESSAGE":
                    if (session.selectedReportId != null) {
                        sendMessageToReportAuthor(chatId, session.selectedReportId, message);
                        session.currentAction = null;
                        session.selectedReportId = null;
                    }
                    break;
            }
            return;
        }

        plugin.getLogger().info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: " + message + " –¥–ª—è chatId: " + chatId);

        switch (message.toLowerCase()) {
            case "/reports":
            case "—Ä–µ–ø–æ—Ä—Ç—ã":
                plugin.getLogger().info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è chatId: " + chatId);
                sendReportsList(chatId);
                break;
            case "/menu":
            case "–º–µ–Ω—é":
                plugin.getLogger().info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è chatId: " + chatId);
                sendMainMenu(chatId);
                break;
            case "/help":
                plugin.getLogger().info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è chatId: " + chatId);
                sendHelpMessage(chatId);
                break;
            default:
                plugin.getLogger().warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + message + " –æ—Ç chatId: " + chatId);
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
                break;
        }
    }

    private void handleCallbackQuery(Update update) {
        String callbackData = update.getCallbackQuery().getData();
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        AdminSession session = adminSessions.get(chatId);
        
        if (session == null) return;

        String[] data = callbackData.split(":");
        String action = data[0];
        
        plugin.getLogger().info("–ü–æ–ª—É—á–µ–Ω callback: " + callbackData + " –æ—Ç chatId: " + chatId);
        
        switch (action) {
            case "view":
                int reportId = Integer.parseInt(data[1]);
                sendReportDetails(chatId, reportId);
                break;
            case "status":
                session.currentAction = "WAITING_STATUS";
                session.selectedReportId = Integer.parseInt(data[1]);
                sendAvailableStatuses(chatId);
                break;
            case "message":
                session.currentAction = "WAITING_MESSAGE";
                session.selectedReportId = Integer.parseInt(data[1]);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Ä–µ–ø–æ—Ä—Ç–∞:");
                break;
            case "delete":
                int deleteReportId = Integer.parseInt(data[1]);
                deleteReport(chatId, deleteReportId);
                break;
            case "block":
                UUID playerUUID = UUID.fromString(data[1]);
                blockPlayer(chatId, playerUUID);
                break;
            case "back":
                sendMainMenu(chatId);
                break;
            case "reports":
                if (data.length > 1) {
                    switch (data[1]) {
                        case "all":
                            sendReportsList(chatId);
                            break;
                        case "new":
                            sendNewReportsList(chatId);
                            break;
                    }
                }
                break;
            case "settings":
                if (data.length > 1) {
                    switch (data[1]) {
                        case "security":
                            sendSecuritySettings(chatId);
                            break;
                        case "blacklist":
                            sendBlacklistMenu(chatId);
                            break;
                        default:
                            sendSettingsMenu(chatId);
                            break;
                    }
                } else {
                    sendSettingsMenu(chatId);
                }
                break;
            case "setstatus":
                if (session.selectedReportId != null && data.length > 1) {
                    updateReportStatus(chatId, session.selectedReportId, data[1]);
                    session.currentAction = null;
                    session.selectedReportId = null;
                }
                break;
        }
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        try {
            plugin.getLogger().info("–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback");
            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(update.getCallbackQuery().getId());
            execute(answer);
        } catch (TelegramApiException e) {
            plugin.getLogger().severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: " + e.getMessage());
        }
    }

    private void sendMainMenu(long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        keyboard.add(Arrays.asList(
            createInlineButton("üìã –í—Å–µ —Ä–µ–ø–æ—Ä—Ç—ã", "reports:all"),
            createInlineButton("üÜï –ù–æ–≤—ã–µ", "reports:new")
        ));

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        keyboard.add(Arrays.asList(
            createInlineButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
            createInlineButton("‚ùì –ü–æ–º–æ—â—å", "help")
        ));

        markup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é BugReports");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é", e);
        }
    }

    private void sendReportsList(long chatId) {
        List<Report> reports = plugin.getDatabaseManager().getAllReports();
        if (reports.isEmpty()) {
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            keyboard.add(Arrays.asList(createInlineButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "back")));
            markup.setKeyboard(keyboard);

            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("üìù *–°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –ø—É—Å—Ç*\n\n–ù–æ–≤—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.");
            message.setParseMode("Markdown");
            message.setReplyMarkup(markup);

            try {
                execute(message);
            } catch (TelegramApiException e) {
                plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–ø–æ—Ä—Ç–æ–≤", e);
            }
            return;
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Report report : reports) {
            String status = report.getStatus();
            String emoji = getStatusEmoji(status);
            String buttonText = String.format("%s #%d - %s", emoji, report.getId(), 
                truncateString(report.getDescription(), 30));
            
            keyboard.add(Arrays.asList(createInlineButton(buttonText, "view:" + report.getId())));
        }

        keyboard.add(Arrays.asList(createInlineButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", "back")));
        markup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤:");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤", e);
        }
    }

    private void sendReportDetails(long chatId, int reportId) {
        Report report = plugin.getDatabaseManager().getReport(reportId);
        if (report == null) {
            sendMessage(chatId, "–†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        String emoji = getStatusEmoji(report.getStatus());
        StringBuilder message = new StringBuilder();
        message.append(String.format("üìù *–†–µ–ø–æ—Ä—Ç #%d*\n", report.getId()));
        message.append(String.format("üë§ *–ò–≥—Ä–æ–∫:* %s\n", report.getPlayerName()));
        message.append(String.format("üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* %s\n", report.getCategory()));
        message.append(String.format("üè∑ *–°—Ç–∞—Ç—É—Å:* %s %s\n", emoji, report.getStatus()));
        message.append(String.format("üìÖ *–°–æ–∑–¥–∞–Ω:* %s\n", report.getCreatedAt()));
        message.append(String.format("üìå *–¢–∏–ø:* %s\n\n", 
            report.getType().name().equals("BUG") ? "–ë–∞–≥" : "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"));
        message.append("üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n");
        message.append(report.getDescription());

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard.add(Arrays.asList(
            createInlineButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "status:" + reportId),
            createInlineButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É", "message:" + reportId)
        ));

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º –∏ —Ä–µ–ø–æ—Ä—Ç–æ–º
        keyboard.add(Arrays.asList(
            createInlineButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞", "block:" + report.getPlayerUUID()),
            createInlineButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", "delete:" + reportId)
        ));

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard.add(Arrays.asList(createInlineButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "back")));

        markup.setKeyboard(keyboard);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(message.toString());
        sendMessage.setParseMode("Markdown");
        sendMessage.setReplyMarkup(markup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ø–æ—Ä—Ç–∞", e);
        }
    }

    private void sendAvailableStatuses(long chatId) {
        List<String> statuses = plugin.getConfig().getStringList("statuses");
        if (statuses.isEmpty()) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É—Å—Ç");
            return;
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (String status : statuses) {
            keyboard.add(Arrays.asList(
                createInlineButton(getStatusEmoji(status) + " " + status, 
                    "setstatus:" + status)
            ));
        }

        keyboard.add(Arrays.asList(createInlineButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "back")));
        markup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤", e);
        }
    }

    private String getStatusEmoji(String status) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        List<String> configStatuses = plugin.getConfig().getStringList("statuses");
        if (configStatuses.isEmpty()) return "üìù";

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞
        int position = configStatuses.indexOf(status);
        if (position == -1) return "üìù";
        
        // –ü–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–±—ã—á–Ω–æ "–ù–æ–≤—ã–π"
        if (position == 0) return "üÜï";
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—ã—á–Ω–æ "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" –∏–ª–∏ "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        if (position == configStatuses.size() - 1) return "‚úÖ";
        // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        return "‚öôÔ∏è";
    }

    private void updateReportStatus(long chatId, int reportId, String newStatus) {
        Report report = plugin.getDatabaseManager().getReport(reportId);
        if (report == null) {
            sendMessage(chatId, "–†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        plugin.getDatabaseManager().updateReportStatus(reportId, newStatus);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞
        plugin.getNotificationManager().addNotification(report.getPlayerUUID(), reportId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        sendMessage(chatId, String.format("–°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ—Ä—Ç–∞ #%d –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s", reportId, newStatus));
        sendReportDetails(chatId, reportId);
    }

    private void sendMessageToReportAuthor(long chatId, int reportId, String message) {
        Report report = plugin.getDatabaseManager().getReport(reportId);
        if (report == null) {
            sendMessage(chatId, "–†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ (–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏ –≤—Ö–æ–¥–µ)
        plugin.getNotificationManager().addMessageNotification(report.getPlayerUUID(), message);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–Ω–ª–∞–π–Ω
        plugin.getNotificationManager().sendMessageToPlayer(report.getPlayerUUID(), message);
        
        sendMessage(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É " + report.getPlayerName());
        sendReportDetails(chatId, reportId);
    }

    public void notifyAdminsNewReport(Report report) {
        String message = String.format("""
            üÜï *–ù–æ–≤—ã–π %s*
            üìù *ID:* #%d
            üë§ *–ò–≥—Ä–æ–∫:* %s
            üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* %s
            
            üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*
            %s""",
            report.getType().name().equals("BUG") ? "–±–∞–≥-—Ä–µ–ø–æ—Ä—Ç" : "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            report.getId(),
            report.getPlayerName(),
            report.getCategory(),
            report.getDescription()
        );

        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        ConfigurationSection linkedAccounts = plugin.getConfig().getConfigurationSection("telegram.linked-accounts");
        if (linkedAccounts != null) {
            for (String chatId : linkedAccounts.getKeys(false)) {
                try {
                    SendMessage sendMessage = new SendMessage();
                    sendMessage.setChatId(chatId);
                    sendMessage.setText(message);
                    sendMessage.setParseMode("Markdown");
                    
                    InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                    keyboard.add(Arrays.asList(
                        createInlineButton("üìù –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–ø–æ—Ä—Ç", "view:" + report.getId())
                    ));
                    markup.setKeyboard(keyboard);
                    sendMessage.setReplyMarkup(markup);
                    
                    execute(sendMessage);
                } catch (Exception e) {
                    plugin.getLogger().log(Level.WARNING, 
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è chatId: " + chatId, e);
                }
            }
        }
    }

    private InlineKeyboardButton createInlineButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private String truncateString(String str, int length) {
        if (str.length() <= length) return str;
        return str.substring(0, length - 3) + "...";
    }

    private boolean isAdminAuthorized(long chatId) {
        return plugin.getConfig().contains("telegram.linked-accounts." + chatId);
    }

    public String generateVerificationCode(UUID playerUUID) {
        String code = UUID.randomUUID().toString().substring(0, 6);
        verificationCodes.put(code, playerUUID);
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        int timeout = plugin.getConfig().getInt("telegram.security.verification-code-timeout", 5);
        plugin.getServer().getScheduler().runTaskLaterAsynchronously(plugin, 
            () -> verificationCodes.remove(code), 20 * 60 * timeout);
        
        return code;
    }

    private void sendMessage(long chatId, String text) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(text);
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram", e);
        }
    }

    public boolean unlinkAccount(UUID playerUUID) {
        String chatIdToRemove = null;
        ConfigurationSection linkedAccounts = plugin.getConfig().getConfigurationSection("telegram.linked-accounts");
        
        if (linkedAccounts != null) {
            for (String chatId : linkedAccounts.getKeys(false)) {
                String uuid = linkedAccounts.getString(chatId);
                if (uuid != null && uuid.equals(playerUUID.toString())) {
                    chatIdToRemove = chatId;
                    break;
                }
            }
        }

        if (chatIdToRemove != null) {
            plugin.getConfig().set("telegram.linked-accounts." + chatIdToRemove, null);
            plugin.saveConfig();
            return true;
        }
        return false;
    }

    public boolean isPlayerLinked(UUID playerUUID) {
        ConfigurationSection linkedAccounts = plugin.getConfig().getConfigurationSection("telegram.linked-accounts");
        if (linkedAccounts != null) {
            for (String chatId : linkedAccounts.getKeys(false)) {
                String uuid = linkedAccounts.getString(chatId);
                if (uuid != null && uuid.equals(playerUUID.toString())) {
                    return true;
                }
            }
        }
        return false;
    }

    private void sendHelpMessage(long chatId) {
        String helpText = """
            *üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*
            
            üìã /reports - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤
            üìä /menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            ‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞–º–∏:*
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–∞–º–∏
            ‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ—Ä—Ç–æ–≤
            ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º
            ‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–ø–æ—Ä—Ç–∞—Ö
            
            *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –∏–≥—Ä–æ–π
            """;

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(helpText);
        message.setParseMode("Markdown");

        try {
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏", e);
        }
    }

    private void sendNewReportsList(long chatId) {
        List<Report> reports = plugin.getDatabaseManager().getAllReports().stream()
            .filter(r -> r.getStatus().equals("–ù–æ–≤—ã–π"))
            .toList();

        if (reports.isEmpty()) {
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            keyboard.add(Arrays.asList(createInlineButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "back")));
            markup.setKeyboard(keyboard);

            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("üìù *–ù–æ–≤—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–µ—Ç*");
            message.setParseMode("Markdown");
            message.setReplyMarkup(markup);

            try {
                execute(message);
            } catch (TelegramApiException e) {
                plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤", e);
            }
            return;
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Report report : reports) {
            String buttonText = String.format("üÜï #%d - %s", report.getId(), 
                truncateString(report.getDescription(), 30));
            keyboard.add(Arrays.asList(createInlineButton(buttonText, "view:" + report.getId())));
        }

        keyboard.add(Arrays.asList(createInlineButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", "back")));
        markup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤:");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤", e);
        }
    }

    private void sendSettingsMenu(long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        keyboard.add(Arrays.asList(
            createInlineButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings:notifications"),
            createInlineButton("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "settings:security")
        ));

        keyboard.add(Arrays.asList(
            createInlineButton("üë• –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "settings:blacklist")
        ));

        keyboard.add(Arrays.asList(createInlineButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", "back")));
        markup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:");
        message.setParseMode("Markdown");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", e);
        }
    }

    private void sendSecuritySettings(long chatId) {
        String text = """
            üîí *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏*
            
            ‚Ä¢ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞: %d –º–∏–Ω—É—Ç
            ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: %d
            
            _–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ config.yml_
            """.formatted(
                plugin.getConfig().getInt("telegram.security.verification-code-timeout", 5),
                plugin.getConfig().getInt("telegram.security.max-verification-attempts", 3)
            );

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(Arrays.asList(createInlineButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "settings")));
        markup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", e);
        }
    }

    private void sendBlacklistMenu(long chatId) {
        List<UUID> blacklist = plugin.getDatabaseManager().getBlacklist();
        StringBuilder text = new StringBuilder("üë• *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\n\n");

        if (blacklist.isEmpty()) {
            text.append("_–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç_");
        } else {
            for (UUID uuid : blacklist) {
                String playerName = Bukkit.getOfflinePlayer(uuid).getName();
                if (playerName != null) {
                    text.append("‚Ä¢ ").append(playerName).append("\n");
                }
            }
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(Arrays.asList(createInlineButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "settings")));
        markup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text.toString());
        message.setParseMode("Markdown");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", e);
        }
    }

    private void deleteReport(long chatId, int reportId) {
        Report report = plugin.getDatabaseManager().getReport(reportId);
        if (report == null) {
            sendMessage(chatId, "–†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        plugin.getDatabaseManager().deleteReport(reportId);
        sendMessage(chatId, String.format("‚úÖ –†–µ–ø–æ—Ä—Ç #%d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reportId));
        sendReportsList(chatId);
    }

    private void blockPlayer(long chatId, UUID playerUUID) {
        String playerName = Bukkit.getOfflinePlayer(playerUUID).getName();
        if (playerName == null) {
            sendMessage(chatId, "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        if (plugin.getDatabaseManager().isBlacklisted(playerUUID)) {
            plugin.getDatabaseManager().removeFromBlacklist(playerUUID);
            sendMessage(chatId, String.format("‚úÖ –ò–≥—Ä–æ–∫ %s —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", playerName));
        } else {
            plugin.getDatabaseManager().addToBlacklist(playerUUID);
            sendMessage(chatId, String.format("üö´ –ò–≥—Ä–æ–∫ %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", playerName));
        }
    }
} 